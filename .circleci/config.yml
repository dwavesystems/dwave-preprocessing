version: 2.1

orbs:
  codecov: codecov/codecov@3
  win: circleci/windows@5.0
  macos: circleci/macos@2.4

commands:
  run-cibuildwheel:
    parameters:
      cibw-version:
        type: string
        default: 2.20.0
    steps:
      - run:
          name: run cibuildwheel
          shell: bash -eo pipefail
          command: |
            if [[ $OS == Windows_NT ]]; then
              python -m pip install --user cibuildwheel==<< parameters.cibw-version >>
              python -m cibuildwheel --output-dir dist
            else
              python3 -m pip install --user cibuildwheel==<< parameters.cibw-version >>
              python3 -m cibuildwheel --output-dir dist
            fi

      - store_artifacts: &store-artifacts
          path: ./dist
      - persist_to_workspace: &persist-to-workspace
          root: ./dist/
          paths: .

environment: &global-environment
  PIP_PROGRESS_BAR: 'off'

jobs:
  build-and-test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:3.9

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker
      - run-cibuildwheel

  build-and-test-linux-aarch64:
    parameters:
      python-version:
        type: string

    machine:
      image: default

    resource_class: arm.medium

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: aarch64

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run-cibuildwheel

  build-and-test-osx:
    parameters:
      python-version:
        type: string
      cibw-arch:
        type: string

    macos:
      xcode: 16.1.0
    resource_class: macos.m1.medium.gen1

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_MACOS: << parameters.cibw-arch >>

    steps:
      - checkout
      - macos/install-rosetta
      - run: git submodule sync
      - run: git submodule update --init
      - run-cibuildwheel

  build-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            python setup.py sdist -d ./dist
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace

  build-and-test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_WINDOWS: AMD64

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run-cibuildwheel

  deploy-all:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  # and configuration to work correctly is a pain. And since there is not
  # significant different between the linux/osx/windows code I think it
  # suffices to just do it once
  test-codecov:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r tests/requirements.txt
      - run: &unix-build
          name: build
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace
      - run:
          name: run coverage
          command: |
            . env/bin/activate
            coverage run -m unittest
            coverage xml
      - codecov/upload:
          file: coverage.xml

  test-doctest:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: install doxygen
          command: |
            sudo apt update
            sudo apt install doxygen
      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r docs/requirements.txt
      - run: *unix-build
      - run:
          name: build docs
          command: |
            . env/bin/activate
            make -C docs/ cpp html
      - store_artifacts:
          path: ./docs/build/html
      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest
      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-dependencies:
    parameters:
      python-version:
        type: string
      dependency-versions:
        type: string

    docker:
      - image: python:<< parameters.python-version >>-slim

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install << parameters.dependency-versions >> --upgrade --only-binary=dimod,numpy
            pip install dwave-preprocessing --no-index -f dist/ --no-deps --force-reinstall
      - run: &unix-run-tests
          name: run tests
          command: |
            . env/bin/activate
            cd tests/
            pip install -r requirements.txt
            python -m unittest

  test-linux-cpp11:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - restore_cache:
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: Create virtual environment
          command: |
            python -m venv env

      - run:
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -r requirements.txt -r tests/requirements.txt -r docs/requirements.txt

      - save_cache:
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run:
          name: run cpp tests
          command: |
            . env/bin/activate
            make -C testscpp/ --always-make

  test-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install from sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install dist/dwave-preprocessing*.tar.gz
      - run: *unix-run-tests

workflows:
  tests:
    jobs:
      - build-and-test-linux: &build
          matrix:
            parameters:
              python-version: &python-versions [3.9.4, 3.10.0, 3.11.0, 3.12.0, 3.13.0]
      - build-and-test-linux-aarch64: *build
      - build-sdist
      - build-and-test-osx: &build-and-test-osx
          matrix:
            parameters:
              python-version: *python-versions
              cibw-arch: [x86_64, arm64]
      - build-and-test-windows: *build
      - test-codecov
      - test-doctest
      - test-dependencies:
          name: test-dependencies - << matrix.dependency-versions >> - py << matrix.python-version >>
          requires:
            - build-and-test-linux
          matrix:
            parameters:
              # test the lowest and highest for each dependency
              dependency-versions: [dimod==0.12.20 oldest-supported-numpy, dimod numpy]
              python-version: *python-versions
      - test-linux-cpp11  
      - test-sdist:
          requires:
            - build-sdist
  deploy:
    jobs:
      - build-and-test-linux: &deploy-build
          <<: *build
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-linux-aarch64: *deploy-build
      - build-and-test-osx:
          <<: *build-and-test-osx
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-sdist:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-windows: *deploy-build
      - deploy-all:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - build-and-test-linux
            - build-and-test-linux-aarch64
            - build-and-test-osx
            - build-sdist
            - build-and-test-windows
